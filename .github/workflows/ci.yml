name: CI

on:
  push:
    branches: [ main, 'feat/jwt-auth' ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    name: Test and build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d test_db" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do pg_isready -h 127.0.0.1 -p 5432 -U postgres -d test_db && break || sleep 1; done

      - name: Run migrations
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          python manage.py migrate --noinput

      - name: Run tests
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          python -m pytest -q

      - name: Run image upload integration test
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          python -m pytest -q tests/integration/test_product_image_upload.py

      - name: Run mocked S3 integration test
        # Run the moto-backed S3 integration test with env overrides so django-storages uses the S3 backend
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          USE_S3: '1'
          AWS_STORAGE_BUCKET_NAME: 'test-bucket'
          AWS_S3_BUCKET_NAME: 'test-bucket'
          AWS_ACCESS_KEY_ID: 'testing'
          AWS_SECRET_ACCESS_KEY: 'testing'
          AWS_S3_REGION_NAME: 'us-east-1'
          AWS_S3_CUSTOM_DOMAIN: 'test-bucket.s3.amazonaws.com'
        run: |
          # Ensure moto/boto3 can intercept S3 calls made by django-storages in the test
          python -m pytest -q tests/integration/test_s3_upload.py

      - name: Collect static files (local)
        # Force local static collection in CI to validate static pipeline without requiring S3 creds
        env:
          USE_S3: '0'
        run: |
          python manage.py collectstatic --noinput

      - name: Build Docker image (validate Dockerfile)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: 'nexus-web:ci'
